{
    "CrewAI Agent": {
        "prefix": "crewAgent",
        "body": [
            "from crewai import Agent",
            "",
            "${1:agent_name} = Agent(",
            "\trole='${2:Your Agent Role}',",
            "\tgoal='${3:Your Agent Goal}',",
            "\tbackstory=(\"\"\"",
            "\t\t${4:A detailed backstory for your agent, explaining its expertise,}",
            "\t\torigin, and motivations. This helps the LLM understand the context",
            "\t\tand persona of the agent.",
            "\t\"\"\"),",
            "\ttools=[",
            "\t\t# ${5:tool_instance_1},",
            "\t\t# ${6:tool_instance_2}",
            "\t],",
            "\tallow_delegation=${7:False},",
            "\tverbose=${8:True},",
            "\t# llm=${9:your_llm_instance} # Optional: Specify the LLM for this agent",
            ")"
        ],
        "description": "Creates a new CrewAI Agent with placeholders for role, goal, backstory, and tools."
    },
    "CrewAI Task": {
        "prefix": "crewTask",
        "body": [
            "from crewai import Task",
            "",
            "${1:task_name} = Task(",
            "\tdescription=(\"\"\"",
            "\t\t${2:Detailed description of the task to be performed.}",
            "\t\tInclude specific instructions, context, and any relevant variables",
            "\t\tor inputs the agent might need. Example: 'Analyze the financial data",
            "\t\tprovided in {financial_data_file} and generate a report on Q3 performance.'",
            "\t\"\"\"),",
            "\texpected_output=(\"\"\"",
            "\t\t${3:Clear and concise description of the expected output from this task.}",
            "\t\tExample: 'A comprehensive report in markdown format, detailing Q3 financial",
            "\t\tperformance, including key metrics, trends, and recommendations.'",
            "\t\"\"\"),",
            "\tagent=${4:agent_instance},",
            "\t# tools=[${5:optional_tool_instance}], # Optional: Specify tools if different from agent's tools",
            "\t# async_execution=${6:False}, # Optional: Set to True for parallel execution",
            "\t# context=[${7:optional_task_instance}], # Optional: List of tasks whose output will be context for this task",
            "\t# output_file='${8:output_file.md}' # Optional: Specify a file to save the task's output",
            ")"
        ],
        "description": "Creates a new CrewAI Task with placeholders for description, agent, and expected_output."
    },
    "CrewAI Crew": {
        "prefix": "crewCrew",
        "body": [
            "from crewai import Crew, Process",
            "",
            "${1:crew_name} = Crew(",
            "\tagents=[",
            "\t\t${2:agent_instance_1},",
            "\t\t${3:agent_instance_2}",
            "\t],",
            "\ttasks=[",
            "\t\t${4:task_instance_1},",
            "\t\t${5:task_instance_2}",
            "\t],",
            "\tprocess=Process.${6:sequential},  # Options: sequential, hierarchical",
            "\tverbose=${7:True},",
            "\t# memory=${8:False}, # Optional: Set to True to enable memory for the crew",
            "\t# cache=${9:True}, # Optional: Set to True to enable caching for tasks",
            "\t# manager_llm=${10:your_llm_instance}, # Optional: LLM for the manager agent in hierarchical process",
            "\t# output_log_file='${11:crew_execution_log.txt}' # Optional: Log execution details to a file",
            ")"
        ],
        "description": "Creates a new CrewAI Crew with placeholders for agents, tasks, and process."
    },
    "CrewAI Tool": {
        "prefix": "crewTool",
        "body": [
            "from crewai_tools import BaseTool",
            "",
            "class ${1:MyCustomTool}(BaseTool):",
            "\tname: str = \"${2:Name of your custom tool}\"",
            "\tdescription: str = \"${3:Brief description of what your tool does and its input parameters}\"",
            "",
            "\tdef _run(self, ${4:argument_name}: str) -> str:",
            "\t\t# Your tool's logic here. For example:",
            "\t\t# if not argument_name:",
            "\t\t#     return \"Error: No argument provided for the tool.\"",
            "\t\t# result = f'Processing {argument_name}'",
            "\t\t# return result",
            "\t\t${5:pass # Implement your tool logic here}",
            "\t\treturn \"Tool execution result\"",
            "",
            "# Optional: Instantiate the tool if you want to use it directly",
            "# ${1:tool_instance} = ${1:MyCustomTool}()"
        ],
        "description": "Defines a new CrewAI Tool class inheriting from BaseTool."
    },
    "CrewAI Flow": {
        "prefix": "crewFlow",
        "body": [
            "from crewai import Flow # Assuming Flow is imported from crewai directly or crewai.flows",
            "",
            "# Define your agents and tasks here if they are part of the flow",
            "# agent_1 = ...",
            "# task_1 = ...",
            "",
            "@Flow()",
            "class ${1:MyAwesomeFlow}:",
            "\t# Define entry point or initial tasks for the flow",
            "\tdef __init__(self):",
            "\t\t# Initialize any state or components required for the flow",
            "\t\t${2:pass}",
            "",
            "\tdef run(self, ${3:initial_input}: dict) -> str:",
            "\t\t# This is an example entry method. Adapt as per CrewAI's Flow API.",
            "\t\t# You might define specific methods for different flow steps decorated with @Task or similar.",
            "\t\tprint(f\"Flow started with input: {initial_input}\")",
            "\t\t# Add your flow logic here, potentially calling tasks or other methods",
            "\t\t# result = self.step_one(initial_input)",
            "\t\t# result = self.step_two(result)",
            "\t\treturn \"Flow completed successfully\"",
            "",
            "\t# Example of a flow step (actual decorators and structure might vary)",
            "\t# @Task(description=\"First step of the flow\")",
            "\t# def step_one(self, data: dict) -> dict:",
            "\t# \t print(\"Executing step one\")",
            "\t# \t # Perform actions, maybe using an agent or tool",
            "\t# \t return {'step_one_output': 'output data'}",
            "",
            "# To run the flow:",
            "# flow_instance = ${1:MyAwesomeFlow}()",
            "# result = flow_instance.run({'data': 'some_initial_data'})",
            "# print(result)"
        ],
        "description": "Creates a basic structure for a CrewAI Flow using @Flow decorator (adapt as per final API)."
    }
}
